networks:
  project-3:
    driver: bridge

x-kafka-common: &kafka-common
  image: bitnami/kafka:latest
  networks:
    - project-3

x-kafka-common-env: &kafka-common-env
  KAFKA_ENABLE_KRAFT: yes # Включаем KRaft режим
  KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER" # Имя слушателя для контроллера
  KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1000@kafka-controller-0:9091,1001@kafka-controller-1:9092,1002@kafka-controller-2:9093 # Кворум контроллеров
  KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT" # Карта протоколов безопасности для слушателей
  ALLOW_PLAINTEXT_LISTENER: yes # Разрешаем использование незащищенного слушателя
  KAFKA_KRAFT_CLUSTER_ID: "JWo_Y2_0Qxejg9cntdQRpw" # Идентификатор кластера KRaft

services:
  # Контроллер 0
  kafka-controller-0:
    <<: *kafka-common
    container_name: kafka-controller-0
    environment:
      <<: *kafka-common-env
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_NODE_ID: 1000 # Идентификатор узла контроллера
      KAFKA_CFG_PROCESS_ROLES: controller # Роль процесса контроллера
      KAFKA_CFG_LISTENERS: "CONTROLLER://:9091" # Слушатель для контроллера

  # Контроллер 1
  kafka-controller-1:
    <<: *kafka-common
    container_name: kafka-controller-1
    environment:
      <<: *kafka-common-env
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_NODE_ID: 1001 # Идентификатор узла контроллера
      KAFKA_CFG_PROCESS_ROLES: controller # Роль процесса контроллера
      KAFKA_CFG_LISTENERS: "CONTROLLER://:9092" # Слушатель для контроллера

  # Контроллер 2
  kafka-controller-2:
    <<: *kafka-common
    container_name: kafka-controller-2
    environment:
      <<: *kafka-common-env
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_NODE_ID: 1002 # Идентификатор узла контроллера
      KAFKA_CFG_PROCESS_ROLES: controller # Роль процесса контроллера
      KAFKA_CFG_LISTENERS: "CONTROLLER://:9093" # Слушатель для контроллера

  # Брокер 0
  kafka-broker-0:
    <<: *kafka-common
    container_name: kafka-broker-0
    depends_on:
      - kafka-controller-0
      - kafka-controller-1
      - kafka-controller-2
    ports:
      - "9094:9094"
    healthcheck:
      test: [ "CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list" ]
      interval: 20s
      timeout: 10s
      retries: 10
    environment:
      <<: *kafka-common-env
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_CLIENT_LISTENER_NAME: EXTERNAL
      KAFKA_CFG_NODE_ID: 0 # Идентификатор узла брокера
      KAFKA_CFG_PROCESS_ROLES: broker # Роль процесса брокера
      KAFKA_CFG_LISTENERS: "INTERNAL://:9092,EXTERNAL://:9094" # Слушатели для брокера
      KAFKA_CFG_ADVERTISED_LISTENERS: "INTERNAL://:9092,EXTERNAL://kafka-broker-0:9094" # Рекламируемые слушатели для брокера

  # Брокер 1
  kafka-broker-1:
    <<: *kafka-common
    container_name: kafka-broker-1
    depends_on:
      - kafka-controller-0
      - kafka-controller-1
      - kafka-controller-2
    ports:
      - "9095:9095"
    healthcheck:
      test: [ "CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list" ]
      interval: 20s
      timeout: 10s
      retries: 10
    environment:
      <<: *kafka-common-env
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_CLIENT_LISTENER_NAME: EXTERNAL
      KAFKA_CFG_NODE_ID: 1 # Идентификатор узла брокера
      KAFKA_CFG_PROCESS_ROLES: broker # Роль процесса брокера
      KAFKA_CFG_LISTENERS: "INTERNAL://:9092,EXTERNAL://:9095" # Слушатели для брокера
      KAFKA_CFG_ADVERTISED_LISTENERS: "INTERNAL://:9092,EXTERNAL://kafka-broker-1:9095" # Рекламируемые слушатели для брокера

  # Брокер 2
  kafka-broker-2:
    <<: *kafka-common
    container_name: kafka-broker-2
    depends_on:
      - kafka-controller-0
      - kafka-controller-1
      - kafka-controller-2
    ports:
      - "9096:9096"
    healthcheck:
      test: [ "CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list" ]
      interval: 20s
      timeout: 10s
      retries: 10
    environment:
      <<: *kafka-common-env
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_CLIENT_LISTENER_NAME: EXTERNAL
      KAFKA_CFG_NODE_ID: 2 # Идентификатор узла брокера
      KAFKA_CFG_PROCESS_ROLES: broker # Роль процесса брокера
      KAFKA_CFG_LISTENERS: "INTERNAL://:9092,EXTERNAL://:9096" # Слушатели для брокера
      KAFKA_CFG_ADVERTISED_LISTENERS: "INTERNAL://:9092,EXTERNAL://kafka-broker-2:9096" # Рекламируемые слушатели для брокера

  # UI для Kafka
  kafka-ui:
    container_name: kafka-ui
    networks:
      - project-3
    restart: always
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8080:8080"
    depends_on:
      kafka-broker-0:
        condition: service_healthy
      kafka-broker-1:
        condition: service_healthy
      kafka-broker-2:
        condition: service_healthy
    environment:
      KAFKA_CLUSTERS_0_NAME: project-3-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka-broker-0:9092,kafka-broker-1:9092,kafka-broker-2:9092

  # Schema Registry
  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    hostname: schema-registry
    container_name: schema-registry
    networks:
      - project-3
    depends_on:
      kafka-broker-0:
        condition: service_healthy
      kafka-broker-1:
        condition: service_healthy
      kafka-broker-2:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka-broker-2:9092,PLAINTEXT://kafka-broker-1:9092,PLAINTEXT://kafka-broker-0:9092
      SCHEMA_REGISTRY_DEBUG: 'true'

  # Postgres
  postgres:
    image: debezium/postgres:16
    hostname: postgres
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres-user
      POSTGRES_PASSWORD: postgres-password
      POSTGRES_DB: project3
    volumes:
      - ./postgres/custom-config.conf:/etc/postgresql/postgresql.conf
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    networks:
      - project-3

  # Kafka Connect
  kafka-connect:
    container_name: kafka-connect
    build:
      context: ./kafka-connect
    ports:
      - "8083:8083"
      - "9875:9875"
      - "9876:9876"
    depends_on:
      - schema-registry
      - postgres
    environment:
      CONNECT_BOOTSTRAP_SERVERS: kafka-broker-0:9092,kafka-broker-1:9092,kafka-broker-2:9092
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: 'kafka-connect'
      CONNECT_REST_ADVERTISED_HOST_NAME: 'localhost'
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_CONFIG_STORAGE_TOPIC: 'connect-config-storage'
      CONNECT_OFFSET_STORAGE_TOPIC: 'connect-offset-storage'
      CONNECT_STATUS_STORAGE_TOPIC: 'connect-status-storage'
      CONNECT_KEY_CONVERTER: "io.confluent.connect.avro.AvroConverter"
      CONNECT_VALUE_CONVERTER: "io.confluent.connect.avro.AvroConverter"
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081/'
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081/'
      KAFKA_JMX_PORT: '9875'
      KAFKA_OPTS: "-javaagent:/opt/jmx_prometheus_javaagent-0.15.0.jar=9876:/opt/kafka-connect.yml"
      CONNECT_CONFIG_PROVIDERS: "file"
      CONNECT_CONFIG_PROVIDERS_FILE_CLASS: "org.apache.kafka.common.config.provider.FileConfigProvider"
      CONNECT_PLUGIN_PATH: /usr/share/java,/etc/kafka-connect/jars
    volumes:
      - ./confluent-hub-components/:/etc/kafka-connect/jars
    networks:
      - project-3

  # Prometheus
  prometheus:
    image: prom/prometheus:v2.30.3
    ports:
      - 9090:9090
    volumes:
      - ./prometheus:/etc/prometheus
    command: --web.enable-lifecycle --config.file=/etc/prometheus/prometheus.yml
    links:
      - kafka-connect
    networks:
      - project-3

  # Grafana
  grafana:
    build:
      context: ./grafana
    ports:
      - 3000:3000
    networks:
      - project-3

  # Consumer
  consumer:
    build:
      context: ./consumer
      dockerfile: Dockerfile
    container_name: consumer
    depends_on:
      kafka-broker-0:
        condition: service_healthy
      kafka-broker-1:
        condition: service_healthy
      kafka-broker-2:
        condition: service_healthy
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka-broker-2:9096
      - SCHEMA_REGISTRY_URL=http://schema-registry:8081
    networks:
      - project-3